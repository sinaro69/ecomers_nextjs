// create product slice

import { BASE_URL } from '@/redux/api'
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'

const initialState = {
    products: [],
    status: 'idle', // idle, loading, succeeded, failed
    error: null
}

// create Async Thunk for fetching products with limit and offset
export const fetchProducts = createAsyncThunk('products/fetchProducts', async ({limit, offset}) => {

    const response = await fetch(`${BASE_URL}/products?limit=${limit}&offset=${offset}`)
    const data = await response.json()
    return data
})
// createAsyncThunk automatically creates action creators that dispatch those actions
// those actions are handled by createSlice below

// create product slice
const productSlice = createSlice({
    name: 'products',
    initialState,
    reducers: {
        // add reducers here
    },
    // extraReducers are for handling actions generated by createAsyncThunk
    extraReducers(builder) {
        // builder is an object that contains all the action types that we've handled so far 
        builder
            // addCase is a method that takes an action type string or an array of action type strings
            // array of action type strings is used when we want to handle multiple actions with the same reducer
            // e.g. addCase([action1.type, action2.type], (state, action) => {})
            
            // fetchProducts.pending === 'products/fetchProducts/pending'
            .addCase(fetchProducts.pending, (state, action) => {
                state.status = 'loading'
            })
            // fetchProducts.fulfilled === 'products/fetchProducts/fulfilled'
            .addCase(fetchProducts.fulfilled, (state, action) => {
                state.status = 'succeeded'
                state.products = action.payload
            })
            // fetchProducts.rejected === 'products/fetchProducts/rejected'
            .addCase(fetchProducts.rejected, (state, action) => {
                state.status = 'failed'
                state.error = action.error.message
            })
    }
})

// export actions
// empty for now because we don't have any actions yet
// normally we would have actions like addProduct, deleteProduct, updateProduct
// export const { addProduct, deleteProduct, updateProduct } = productSlice.actions
export const { } = productSlice.actions

// export reducer
export default productSlice.reducer

// export selectors
export const selectAllProducts = state => state.products.products
export const selectProductById = (state, productId) => state.products.products.find(product => product.id === productId)
export const selectProductStatus = state => state.products.status
export const selectProductError = state => state.products.error

